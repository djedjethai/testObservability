// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service/proto/v1/Operand.proto

package operand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperandManagementClient is the client API for OperandManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperandManagementClient interface {
	SendOperand(ctx context.Context, in *Data, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type operandManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewOperandManagementClient(cc grpc.ClientConnInterface) OperandManagementClient {
	return &operandManagementClient{cc}
}

func (c *operandManagementClient) SendOperand(ctx context.Context, in *Data, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/v1_operandl.OperandManagement/SendOperand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperandManagementServer is the server API for OperandManagement service.
// All implementations must embed UnimplementedOperandManagementServer
// for forward compatibility
type OperandManagementServer interface {
	SendOperand(context.Context, *Data) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedOperandManagementServer()
}

// UnimplementedOperandManagementServer must be embedded to have forward compatible implementations.
type UnimplementedOperandManagementServer struct {
}

func (UnimplementedOperandManagementServer) SendOperand(context.Context, *Data) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOperand not implemented")
}
func (UnimplementedOperandManagementServer) mustEmbedUnimplementedOperandManagementServer() {}

// UnsafeOperandManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperandManagementServer will
// result in compilation errors.
type UnsafeOperandManagementServer interface {
	mustEmbedUnimplementedOperandManagementServer()
}

func RegisterOperandManagementServer(s grpc.ServiceRegistrar, srv OperandManagementServer) {
	s.RegisterService(&OperandManagement_ServiceDesc, srv)
}

func _OperandManagement_SendOperand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperandManagementServer).SendOperand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1_operandl.OperandManagement/SendOperand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperandManagementServer).SendOperand(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// OperandManagement_ServiceDesc is the grpc.ServiceDesc for OperandManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperandManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1_operandl.OperandManagement",
	HandlerType: (*OperandManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOperand",
			Handler:    _OperandManagement_SendOperand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/proto/v1/Operand.proto",
}
